//
//  PHPFunctions.h
//  noobtest
//
//  Created by siggi on 24.7.2024.
//

#ifndef PHPFunctions_h
#define PHPFunctions_h

#import "Math.h"
#import <Foundation/Foundation.h>
@class rootSolver;
@class PHPUndefined;

@interface Evaluation : NSObject
- (void )initializeItems;
- (NSObject* )makeIntoStr: (NSObject* ) value ;
- (NSMutableArray* )arrayUnique: (NSMutableArray* ) arr ;
- (NSMutableArray* )concat: (NSMutableArray* ) a b: (NSMutableArray* ) b ;
- (NSNumber* )itemIsArray: (NSObject* ) item ;
- (NSNumber* )inArray: (NSObject* ) item arr: (NSMutableArray* ) arr ;
- (NSMutableArray* )strSplit: (NSString* ) value ;
- (NSMutableArray* )explode: (NSString* ) delimiter term: (NSString* ) term ;
- (NSMutableArray* )split: (NSString* ) delimiter term: (NSString* ) term ;
- (NSString* )substr: (NSString* ) value start: (NSNumber* ) start length: (NSNumber* ) length ;
- (NSNumber* )isset: (NSObject* ) value ;
- (NSNumber* )issetAlt: (NSMutableArray* ) arr key: (NSNumber* ) key ;
- (NSNumber* )strlen: (NSString* ) value ;
- (NSString* )strrev: (NSString* ) value ;
- (NSString* )trimSub: (NSString* ) value ;
- (NSNumber* )strpos: (NSString* ) value search: (NSString* ) search ;
- (NSObject* )arrayShift: (NSMutableArray* ) arr ;
- (NSObject* )arrayPop: (NSMutableArray* ) arr ;
- (void )arrayUnshift: (NSMutableArray* ) arr item: (NSObject* ) item ;
- (NSString* )join: (NSString* ) delimiter term: (NSMutableArray* ) term ;
- (NSString* )implode: (NSString* ) delimiter term: (NSMutableArray* ) term ;
- (NSMutableArray* )reverse: (NSMutableArray* ) input ;
- (NSMutableArray* )arrayReverse: (NSMutableArray* ) input ;
- (NSNumber* )countvalue: (NSObject* ) input ;
- (NSMutableArray* )getDigits: (NSString* ) term removeDecimalPoint: (NSNumber* ) removeDecimalPoint removeNegative: (NSNumber* ) removeNegative ;
- (NSString* )removeLeadingZeros: (NSString* ) value reverse: (NSNumber* ) reverse ;
@property (nonatomic) Math*math;
- (NSString* )result: (NSString* ) termA termB: (NSString* ) termB ;
- (NSString* )resultSub: (NSString* ) termA termB: (NSString* ) termB ;
- (NSString* )addSub: (NSString* ) termA termB: (NSString* ) termB base: (NSNumber* ) base limitDecimals: (NSNumber* ) limitDecimals ;
- (NSString* )add: (NSString* ) termA termB: (NSString* ) termB ;
- (NSString* )addMultiple: (NSMutableArray* ) values ;
- (NSString* )removeMinus: (NSString* ) value ;
- (NSString* )subtractSub: (NSString* ) termA termB: (NSString* ) termB base: (NSNumber* ) base limitDecimals: (NSNumber* ) limitDecimals ;
- (NSString* )subtract: (NSString* ) termA termB: (NSString* ) termB ;
- (NSString* )lengthenFraction: (NSString* ) value length: (NSString* ) length ;
- (NSString* )lengthenTo: (NSString* ) value lengthTo: (NSString* ) lengthTo ;
- (NSMutableDictionary* )common: (NSString* ) value shorten: (NSNumber* ) shorten ;
- (NSString* )makeDecimalValue: (NSNumber* ) length ;
- (NSNumber* )fraction: (NSString* ) value ;
- (NSString* )multiplyFraction: (NSString* ) valueA valueB: (NSString* ) valueB shorten: (NSNumber* ) shorten ;
- (NSMutableDictionary* )multiplyTotal: (NSMutableDictionary* ) valueA valueB: (NSMutableDictionary* ) valueB shorten: (NSNumber* ) shorten ;
- (NSMutableDictionary* )multiplyTotalSub: (NSMutableDictionary* ) valueA value: (NSString* ) value ;
- (NSMutableDictionary* )multiplyTotalSubDepr: (NSMutableDictionary* ) valueTotal value: (NSString* ) value ;
- (NSString* )minimizeFraction: (NSString* ) value ;
- (NSString* )ceil: (NSMutableDictionary* ) value ;
- (NSString* )round: (NSMutableDictionary* ) value ;
@property (nonatomic) NSNumber* truncateFractions;
@property (nonatomic) NSNumber* truncateFractionsLength;
- (void )assignTruncateFractions: (NSNumber* ) length ;
- (NSString* )stringPrefix: (NSNumber* ) depth ;
- (NSMutableArray* )commonDenominator: (NSString* ) valueA valueB: (NSString* ) valueB ;
- (NSMutableArray* )multipleDenominators: (NSMutableArray* ) values ;
- (NSMutableArray* )fractionValues: (NSString* ) value ;
- (NSString* )fractionString: (NSMutableArray* ) fraction ;
- (NSString* )collectResults: (NSMutableArray* ) intermediateResults base: (NSNumber* ) base ;
- (NSString* )placeDecimal: (NSString* ) value length: (NSNumber* ) length removeDecimal: (NSNumber* ) removeDecimal prefix: (NSNumber* ) prefix ;
- (NSString* )placeDecimalAlt: (NSString* ) value length: (NSNumber* ) length removeDecimal: (NSNumber* ) removeDecimal prefix: (NSNumber* ) prefix ;
- (NSString* )padZeros: (NSString* ) value length: (NSNumber* ) length reverse: (NSNumber* ) reverse ;
- (NSString* )subDivide: (NSString* ) divider value: (NSString* ) value changeBase: (NSNumber* ) changeBase ;
- (NSMutableArray* )combinations: (NSMutableArray* ) values ;
- (NSMutableDictionary* )logarithmSub: (NSMutableDictionary* ) value base: (NSMutableDictionary* ) base ;
- (void )setLogarithmPrecision: (NSNumber* ) logarithmPrecision ;
- (NSMutableDictionary* )logarithm: (NSMutableDictionary* ) value base: (NSMutableDictionary* ) base iterationCount: (NSNumber* ) iterationCount ;
- (NSMutableDictionary* )naturalLogarithm: (NSMutableDictionary* ) value ;
@property (nonatomic) NSNumber* logarithmIterationCount;
- (NSMutableDictionary* )logarithmBase: (NSMutableDictionary* ) value base: (NSMutableDictionary* ) base ;
- (NSString* )quickFraction: (NSString* ) value ;
- (NSString* )absoluteFraction: (NSString* ) value ;
- (NSMutableDictionary* )wholeCommon: (NSString* ) value ;
- (NSString* )wholeNumerator: (NSMutableDictionary* ) value ;
- (NSMutableArray* )partialFactorial: (NSString* ) value stop: (NSString* ) stop ;
@property (nonatomic) NSMutableDictionary* nextRationalRootStartFirst;
@property (nonatomic) NSMutableDictionary* nextRationalRootStartSecond;
- (NSMutableDictionary* )nextRationalRootSub: (NSString* ) value assignedPower: (NSString* ) assignedPower same: (NSNumber* ) same ;
- (NSMutableDictionary* )nextRationalRoot: (NSString* ) value assignedPower: (NSString* ) assignedPower same: (NSNumber* ) same ;
- (NSMutableArray* )listRationalRoots: (NSString* ) from to: (NSString* ) to assignedPower: (NSString* ) assignedPower ;
- (NSMutableDictionary* )nextRationalRootList: (NSString* ) value assignedPower: (NSString* ) assignedPower same: (NSNumber* ) same previousSetStart: (NSNumber* ) previousSetStart ;
- (NSMutableDictionary* )preprocessPower: (NSMutableDictionary* ) value power: (NSMutableDictionary* ) power ;
- (NSMutableDictionary* )intermediateProcessPower: (NSMutableDictionary* ) value power: (NSMutableDictionary* ) power ;
- (NSMutableDictionary* )power: (NSMutableDictionary* ) value power: (NSMutableDictionary* ) power ;
- (NSMutableDictionary* )executePowerWhole: (NSMutableDictionary* ) value power: (NSMutableDictionary* ) power ;
- (NSMutableDictionary* )makeWhole: (NSMutableDictionary* ) value ;
- (NSMutableDictionary* )root: (NSString* ) x n: (NSString* ) n ;
- (NSString* )rootSub: (NSString* ) x n: (NSString* ) n ;
@property (nonatomic) NSMutableDictionary* rootFractionPrecision;
@property (nonatomic) NSNumber* maximumRootFractionIterations;
- (NSMutableDictionary* )rootFraction: (NSMutableDictionary* ) mainValue root: (NSString* ) root p: (NSMutableDictionary* ) p ;
- (NSMutableDictionary* )squareRoot: (NSString* ) value ;
- (NSMutableDictionary* )cubicRoot: (NSString* ) value ;
- (NSString* )trim: (NSString* ) value ;
- (NSMutableArray* )findContinuedFraction: (NSMutableDictionary* ) value power: (NSString* ) power limit: (NSNumber* ) limit precision: (NSNumber* ) precision ;
- (NSMutableArray* )squareRootFraction: (NSString* ) value limit: (NSNumber* ) limit ;
- (NSMutableArray* )detectPeriodContinuedFraction: (NSMutableArray* ) continuedFraction ;
@property (nonatomic) NSNumber* continuedFractionResolutionLevel;
@property (nonatomic) NSNumber* assignedContinuedFractionResolutionLevel;
@property (nonatomic) NSNumber* assignedContinuedFractionResolutionLevelSetting;
- (void )setPeriodicContinuedFractionPrecision: (NSNumber* ) precision ;
@property (nonatomic) NSMutableArray* currentContinuedFraction;
@property (nonatomic) NSMutableArray* currentContinuedFractionWhole;
@property (nonatomic) NSString* currentContinuedFractionSquaredValue;
- (NSMutableDictionary* )resolveContinuedFraction: (NSMutableArray* ) continuedFraction value: (NSString* ) value ;
- (NSMutableDictionary* )resolveContinuedFractionSub: (NSMutableArray* ) continuedFraction ;
- (NSMutableArray* )terminatingContinuedFractionValues: (NSMutableArray* ) continuedFraction variable: (NSNumber* ) variable ;
- (NSMutableArray* )terminatingContinuedFraction: (NSMutableArray* ) continuedFraction value: (NSMutableDictionary* ) value ;
- (NSString* )flipFraction: (NSString* ) value ;
- (NSMutableDictionary* )executePowerAlterA: (NSString* ) value ;
- (NSMutableDictionary* )factorRoot: (NSMutableDictionary* ) value power: (NSString* ) power ;
- (NSMutableDictionary* )solveRemainderSquare: (NSMutableDictionary* ) value remainderSquared: (NSMutableDictionary* ) remainderSquared ;
- (NSMutableDictionary* )reuseSquareRoot: (NSMutableDictionary* ) value knownRoot: (NSMutableDictionary* ) knownRoot ;
- (NSMutableDictionary* )rootByDenominator: (NSMutableDictionary* ) value denominatorRoot: (NSString* ) denominatorRoot power: (NSString* ) power ;
@property (nonatomic) NSNumber* maximumExponentCount;
@property (nonatomic) NSNumber* executePowerApproximateFlag;
@property (nonatomic) NSNumber* disableBuiltInApproximation;
@property (nonatomic) NSNumber* disableExactRootResults;
- (NSMutableDictionary* )executePower: (NSMutableDictionary* ) value power: (NSString* ) power ;
- (NSString* )resultMultiple: (NSMutableArray* ) values ;
- (NSMutableArray* )quadratic: (NSString* ) a b: (NSString* ) b c: (NSString* ) c ;
@property (nonatomic) NSNumber* maximumDividerExponent;
- (NSMutableDictionary* )smallDivide: (NSString* ) value divider: (NSString* ) divider ;
- (NSMutableDictionary* )executeDivide: (NSObject* ) value divider: (NSObject* ) divider shorten: (NSNumber* ) shorten fast: (NSNumber* ) fast numeric: (NSNumber* ) numeric preShorten: (NSNumber* ) preShorten absolute: (NSNumber* ) absolute ;
- (NSMutableDictionary* )executeDivideMain: (NSObject* ) value divider: (NSObject* ) divider shorten: (NSNumber* ) shorten fast: (NSNumber* ) fast numeric: (NSNumber* ) numeric preShorten: (NSNumber* ) preShorten absolute: (NSNumber* ) absolute ;
- (NSMutableDictionary* )executeDivideSub: (NSString* ) value divider: (NSString* ) divider ;
- (NSNumber* )divisible: (NSObject* ) value divider: (NSObject* ) divider ;
- (NSString* )floor: (NSString* ) value ;
- (NSMutableDictionary* )executeSubDivide: (NSString* ) value divider: (NSString* ) divider ;
- (NSMutableDictionary* )divide: (NSString* ) value divider: (NSString* ) divider ;
- (NSNumber* )isBinaryPower: (NSString* ) value changeBase: (NSNumber* ) changeBase ;
- (NSString* )binaryMultiplication: (NSString* ) value multiplier: (NSString* ) multiplier ;
- (NSString* )binaryAddition: (NSString* ) valueInput additionInput: (NSString* ) additionInput ;
- (NSString* )binarySubtraction: (NSString* ) valueInput subtractionInput: (NSString* ) subtractionInput ;
- (NSString* )invertNegatives: (NSMutableArray* ) value ;
- (NSMutableArray* )integerFraction: (NSString* ) value ;
- (NSString* )numericValue: (NSMutableDictionary* ) exponentPair ;
- (NSString* )realFraction: (NSString* ) value decimalPoints: (NSNumber* ) decimalPoints level: (NSNumber* ) level ;
- (NSString* )quickNumeric: (NSMutableDictionary* ) value decimalPlaces: (NSNumber* ) decimalPlaces ;
- (NSString* )numericWhole: (NSString* ) value fraction: (NSString* ) fraction decimalPlaces: (NSNumber* ) decimalPlaces ;
- (NSMutableDictionary* )cleanRemainder: (NSMutableDictionary* ) value ;
- (NSString* )cleanFraction: (NSString* ) value ;
- (NSString* )addPlace: (NSString* ) termA termB: (NSString* ) termB place: (NSNumber* ) place base: (NSNumber* ) base limitDecimals: (NSNumber* ) limitDecimals ;
- (NSMutableDictionary* )synchronizeValues: (NSString* ) termA termB: (NSString* ) termB ;
- (NSString* )calculateRealFraction: (NSString* ) value decimalPoints: (NSNumber* ) decimalPoints ;
- (NSString* )divideFraction: (NSString* ) valueA valueB: (NSString* ) valueB shorten: (NSNumber* ) shorten ;
- (NSString* )subtractFraction: (NSString* ) valueA valueB: (NSString* ) valueB ;
- (NSMutableDictionary* )subtractTotal: (NSMutableDictionary* ) valueA valueB: (NSMutableDictionary* ) valueB shorten: (NSNumber* ) shorten ;
- (NSMutableDictionary* )subtractTotalSub: (NSMutableDictionary* ) valueA valueB: (NSMutableDictionary* ) valueB ;
- (NSString* )makeFraction: (NSMutableArray* ) fraction ;
- (NSString* )addFraction: (NSString* ) valueA valueB: (NSString* ) valueB ;
- (NSString* )makeFractionNegative: (NSString* ) fractionValue ;
- (NSMutableDictionary* )addTotal: (NSMutableDictionary* ) termA termB: (NSMutableDictionary* ) termB shorten: (NSNumber* ) shorten ;
- (NSMutableDictionary* )addTotalSub: (NSMutableDictionary* ) valueA valueB: (NSMutableDictionary* ) valueB shorten: (NSNumber* ) shorten ;
- (NSNumber* )equalsZero: (NSObject* ) value ;
- (NSNumber* )negative: (NSObject* ) value ;
- (NSString* )negativeValue: (NSMutableDictionary* ) value ;
- (NSObject* )absolute: (NSMutableDictionary* ) value ;
- (NSNumber* )larger: (NSString* ) valueA valueB: (NSString* ) valueB equal: (NSNumber* ) equal ;
- (NSNumber* )largerTotal: (NSMutableDictionary* ) valueA valueB: (NSMutableDictionary* ) valueB same: (NSNumber* ) same ;
- (NSNumber* )largerFraction: (NSString* ) valueA valueB: (NSString* ) valueB ;
- (NSNumber* )even: (NSString* ) value ;
- (NSNumber* )multiple: (NSString* ) value multiple: (NSString* ) multiple ;
- (NSMutableArray* )primeFactorsNew: (NSString* ) value ;
- (NSMutableArray* )primeFactorsAlt: (NSString* ) value ;
- (NSMutableArray* )listDivisors: (NSString* ) value ;
- (NSString* )digitSum: (NSString* ) value subtract: (NSNumber* ) subtract ;
- (NSString* )finalDigitSum: (NSString* ) value ;
- (NSString* )bitShift: (NSString* ) value places: (NSNumber* ) places changeBase: (NSNumber* ) changeBase ;
- (NSString* )bitShiftRight: (NSString* ) value places: (NSNumber* ) places changeBase: (NSNumber* ) changeBase ;
- (NSString* )changeBaseDecimal: (NSString* ) value oldBase: (NSString* ) oldBase ;
- (NSMutableDictionary* )changeBaseTotal: (NSMutableDictionary* ) value newBase: (NSString* ) newBase base: (NSString* ) base limitDecimals: (NSNumber* ) limitDecimals ;
@property (nonatomic) NSNumber* maximumBaseChangeExponent;
- (NSString* )changeBase: (NSString* ) value newBase: (NSNumber* ) newBase base: (NSNumber* ) base limitDecimals: (NSNumber* ) limitDecimals findLastExponent: (NSNumber* ) findLastExponent ;
- (NSString* )fractionBase: (NSString* ) value newBase: (NSString* ) newBase base: (NSString* ) base limitDecimals: (NSNumber* ) limitDecimals ;
- (NSNumber* )decimalMult: (NSString* ) value ;
- (NSNumber* )allDigitsSame: (NSString* ) value ;
- (NSString* )modulus: (NSString* ) value divider: (NSString* ) divider ;
- (NSString* )ord: (NSString* ) value modulusValue: (NSString* ) modulusValue ;
- (NSNumber* )perfectPower: (NSString* ) value ;
- (NSString* )gcd: (NSString* ) a b: (NSString* ) b ;
- (NSString* )executeShortenFraction: (NSString* ) value bypassTruncation: (NSNumber* ) bypassTruncation ;
- (NSString* )shortenFractionGcdSub: (NSString* ) a b: (NSString* ) b ;
- (NSNumber* )coprime: (NSString* ) a b: (NSString* ) b ;
- (NSString* )modexp: (NSString* ) a b: (NSString* ) b n: (NSString* ) n ;
@end
#endif /* PHPFunctions_h */
